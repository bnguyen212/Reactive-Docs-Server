#!/usr/bin/env node

/**
 * Module dependencies.
 */

var crypto = require( 'crypto' );
var app = require('../server/server.js');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || normalizePort('3000');
app.set('port', port);

/**
 * Create HTTP server.
 * Create Socket Io
 */

var server = http.createServer(app);
var io = require( 'socket.io' )( server );

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log( 'Listening on ' + bind + '\n' )
}


// Hash function
function hash256( word ) {
    var hash = crypto.createHash( 'sha256' );
    hash.update( word + 'amazingDisplayOfSkill,withTheGreatestOfEase' );
    return hash.digest( 'hex' );
}

// Object to store the most recent EditorState of each Document
  // The keys are hashed Document Id's
  /**
    documentList: {
      docId: {
        content: editorState rawContent,
        selectionObj: {                   // Unused
          color(rgb): selectionState
        },
        prevSelectionObj: {               // Unused
          color(rgb): prevSelectionState
        }
      }
    }
  */
var documentList = {};
// Array of User Cursor and Highlight colors
var userColorArray = [
    "#99ffcc",  // blue
    "#ff9933",  // orange
    "#cc99ff",  // purple
    "#99ff66",  // green
    "#ff9999",  // pink
];

/** Socket Io events **/
io.on( 'connection', function( socket ) {
    // When a User opens a Document, the User joins a room associated with that Document's Id
      // data: { userId, docId }
    socket.on( 'openDoc', function( data, callback ) {
        var dataId = hash256( data.docId );
        io.in( dataId ).clients( ( clientFindError, clientArray ) => {
            if( clientFindError ) return console.log( "Client Find Error:", clientFindError );
            if( clientArray.length >= 5 ) return callback( { error: "Document room is full." } );
            var selectedColor = userColorArray[ clientArray.length ];
            var responseData = {
                token: data.userId,
                color: selectedColor
            };
            if( documentList[ dataId ] ) {
                responseData.content = documentList[ dataId ].content || {};
                // responseData.selectionObj = documentList[ dataId ].selectionObj || {};
                // responseData.prevSelectionObj = documentList[ dataId ].prevSelectionObj || {};
            }
            else { responseData.content = "fetch"; }
            // responseData: { token, content, color, selectionObj, prevSelectionObj }
              // selectionObj and prevSelectionObj are each User's current and previous selectionStates
            callback( responseData );
            socket.join( dataId );
        });
    });

    // When a user edits a Document, the User broadcasts an event to all other Users in that Document's room
      // data: { content, token, docId, userColor, selectionObj, prevSelectionObj }
    socket.on( 'editDoc', function( data ) {
        var dataId = hash256( data.docId );
        if( !documentList[ dataId ] ) documentList[ dataId ] = {};
        documentList[ dataId ].content = data.content;
        // if( !documentList[ dataId ].selectionObj ) documentList[ dataId ].selectionObj = {};
        // documentList[ dataId ].selectionObj = data.selectionObj;
        // if( !documentList[ dataId ].selectionObj ) documentList[ dataId ].prevSelectionObj = {};
        // documentList[ dataId ].selectionObj = data.prevSelectionObj;
        responseData = {
            content: data.content,
            token: data.token,
            // selectionObj: documentList[ dataId ].selectionObj,
            // prevSelectionObj: documentList[ dataId ].prevSelectionObj,
        };
        socket.to( dataId ).emit( 'updateDoc', responseData )
    });

    // When a user closes a Document, the User leaves that Document's room
    // The selectionState for that User's color is also cleared
      // data: { docId, userColor }
    socket.on( 'closeDoc', function( data ) {
        var dataId = hash256( data.docId );
        socket.leave( dataId );
        // if( documentList[ dataId ] ) delete documentList[ dataId ].selectionObj[ data.userColor ];
        io.in( dataId ).clients( ( clientFindError, clientArray ) => {
            if( clientFindError ) return console.log( "Client Find Error:", clientFindError );
            if( clientArray.length === 0 ) {
                documentList[ dataId ] = null;
            }
        });
    });
});

/**
    Drive By
**/