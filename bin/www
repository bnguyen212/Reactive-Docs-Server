#!/usr/bin/env node

/**
 * Module dependencies.
 */

var crypto = require( 'crypto' );
var app = require('../server/server.js');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || normalizePort('3000');
app.set('port', port);

/**
 * Create HTTP server.
 * Create Socket Io
 */

var server = http.createServer(app);
var io = require( 'socket.io' )( server );

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log( 'Listening on ' + bind + '\n' )
}


// Hash function
function hash256( word ) {
    var hash = crypto.createHash( 'sha256' );
    hash.update( word + 'amazingDisplayOfSkill,withTheGreatestOfEase' );
    return hash.digest( 'hex' );
}

// Variable to store the most recent EditorState of each Document
  // The keys of these objects will be the Document Model mongoDb Object Id
  // The value will be a JSON string of an EditorState's "rawContent"
var documentList = {};
// Variable for the current User
var token;

/** Socket Io events **/
io.on( 'connection', function( socket ) {
    // When a User opens a Document, the User joins a room associated with that Document's Id
      // data: { userId, docId }
    socket.on( 'openDoc', function( data, callback ) {
        var responseData = {
            token: hash256( data.userId );
        };
        if( documentList[ hash256( data.docId ) ] ) {
            responseData.content = documentList[ hash256( data.docId ) ];
        }
        else {
            responseData.content: "fetch";
        }
        callback( responseData );
        socket.join( hash256( data.docId ) );
    });
    
    // When a user edits a Document, the User broadcasts an event to all other Users in that Document's room
      // data: { content, token }
    socket.on( 'editDoc', function( data ) {
        documentList[ hash256( data.docId ) ] = data.content;
        responseData = {
            content: data.content,
            token: data.token
        }
        io.sockets.in( hash256( data.docId ) ).emit( 'updateDoc', responseData )
    });
});
